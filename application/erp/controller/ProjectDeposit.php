<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/5/23
 * Time: 13:02
 */

namespace app\erp\controller;

use app\base\controller\Upload;
use app\base\model\Base;
use app\base\model\finance\Bank;
use app\base\model\finance\CollectPlan;
use app\base\model\finance\CollectPlanAccess;
use app\base\model\finance\CollectStyle;
use app\base\model\finance\PaymentStyle;
use app\base\model\PersonnelCompany;
use app\base\model\PersonnelDepartment;
use app\base\model\PersonnelUser;
use app\base\model\Project;
use app\base\model\project\ProjectCollectPrice;
use app\base\model\project\ProjectCollectPricePay;
use app\base\model\project\ProjectCollectPriceRefund;
use app\base\model\project\ProjectDepositAudit;
use app\base\model\project\ProjectField;
use app\base\model\project\ProjectPhoto;
use app\base\model\ProjectContacts;
use app\base\model\ProjectRemindTime;
use app\base\model\ProjectStructure;
use app\base\model\ProjectBuilding;
use app\base\model\ProjectTraceLog;
use app\erp\config\FieldValue;
use app\erp\controller\template_message\SendTemplateMessage;
use think\Db;
use think\Loader;
use think\Session;
use app\erp\config\Config;


class ProjectDeposit extends Auth
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        $this->config_list = Config::$project;
    }
    public function showPayStyleJson(){
        $model=new PaymentStyle();
        $list=$model->getList(['company_id'=>$this->member_info->company_id],'guid,name');
        return $list;
    }
    public function showBankJson(){
        $model=new Bank();
        $list=$model->getList(['company_id'=>$this->member_info->company_id],'guid,name');
        return $list;
    }
    public function showCollectPlanJson(){
        $model=new CollectPlan();
        $list=$model->getList(['company_id'=>$this->member_info->company_id],'guid,collect_plan_name');
        return $list;
    }
    public function showCollectJson(){
        $model=new CollectStyle();
        $list=$model->getList(['company_id'=>$this->member_info->company_id],'guid,collect_name,collect_value');
        $arr[0]=[
            'guid'=>0,
            'collect_name'=>'请选择款项类型',
            'collect_value'=>'0'
        ];
        return array_merge($arr,$list);
    }
    public function showCashierUserJson(){  //出纳人数据
//        $model=new Bank();
//        $list=$model->getList(['company_id'=>$this->member_info->company_id],'uuid,uuid_name');
        $dep_type=array_search("财务部",FieldValue::getFieldValue("department_type"))?:5;
        $model=new PersonnelUser();
        $list=$model->getList(['company_id'=>$this->member_info->company_id,'department_type'=>$dep_type],'uuid,name');
        if (!empty($list)){
            foreach ($list as $key=> $value){
                $list[$key]['uuid_name']=$value["name"];
            }
        }
        return $list;
    }

    public function showAddDeposit(){
        config(['default_ajax_return' => 'html',]);
        $assign_data= [

        ];
        $this->assign($assign_data);
        return $this->fetch('show_add_deposit');
    }
    /*定金单录入数据*/
    public function addDepositData($guid=""){
        if (empty($guid)) return self::showReturnCodeWithOutData(1003);
        if ($this->request->post()){
            $data=$this->request->post();
            $model=new ProjectDepositAudit();
            $validate_time='base/ProjectDeposit.add';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $data['payment_uuid']=$this->uuid; //定金单录入者
            $pro_name=Loader::model('base/Project')->where(['guid'=>$guid,'status'=>1])->value('project_name');
            if (empty($pro_name)) return self::showReturnCodeWithOutData(1003,'此项目不存在，请更新数据');
            $payment_name=Loader::model('base/finance/PaymentStyle')->where(['guid'=>$data['payment_id'],'status'=>1])->value('name');
            $data['payment_name']=$payment_name;
            $data['payment_uuid_name']=$this->member_info->name;
            $data['project_name']=$pro_name;
            $data['company_id']=$this->member_info->company_id;
            $data['project_id']=$guid;
            $data['payment_date']=strtotime($data['payment_date']);
            $re=$model->saveData($data);
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="定金单录入";
                $log["guid"]=$guid;
                $log["uuid"]=$data['payment_uuid'];
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);

                SendTemplateMessage::sendTemplateMessage('moneyPending');
            }
            return $re;
        }else{
            return self::showReturnCodeWithOutData(1003);
        }
    }
    /*定金款审核列表*/
    public function showProjectDepositList(){
        if ($this->request->post()){
            $map=[
                'company_id'=>$this->member_info->company_id
            ];
            $list=$this->showEasyUiJsonListNo('base/project/ProjectDepositAudit',false,$map);
            $model=new ProjectDepositAudit();
            $list=$model->getTime($list,'payment_date');
            return $list;
        }else{
            config(['default_ajax_return' => 'html',]);
            $assign_data= [
                'title'=>'定金单审核',
                'data_url'=>url('showProjectDepositList'),
            ];
            $this->assign($assign_data);
            return $this->fetch('show_project_deposit_list');
        }
    }
    /*项目定金审核*/
    public function showProjectDepositEdit($guid=""){
        if (empty($guid)) return self::showReturnCodeWithOutData(1003);
        $model=new ProjectDepositAudit();
        if ($this->request->isPost()){
            $data=$this->request->post();
            $data['collected_uuid']=$this->uuid;
            $validate_time='base/ProjectDeposit.audit';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $data['collected_date']=strtotime($data['collected_date']);
            $data['collected_uuid_name']=$this->member_info->name;
            $re=$model->editDateDeposit($data,$guid);
            $pro_id=$model->where(['guid'=>$guid])->value('project_id');
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="定金单审核";
                $log["guid"]=$pro_id;
                $log["uuid"]=$data['collected_uuid'];
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
            }
            return $re;
        }else{
            $arr=$model->getInfoByGuId($guid);
            $arr=$model->getTime($arr,'payment_date',false);
            config(['default_ajax_return' => 'html',]);
            $assign_data= [
                'data'=>$arr,
            ];
            $this->assign($assign_data);
            return $this->fetch('show_project_deposit_edit');
        }
    }
    /*项目定金查看*/
    public function lookProjectDe($guid=""){
        if (empty($guid)) return self::showReturnCodeWithOutData(1003);
        $model=new ProjectDepositAudit();
        if ($this->request->isPost()){
            $list=$this->showEasyUiJsonListNoStatus('base/project/ProjectDepositAudit',false,['project_id'=>$guid]);
            $list=$model->getTime($list,'payment_date',true);
            $list=$model->getTime($list,'collected_date',true);
            return $list;
        }else{
            if (empty($guid)) return self::showReturnCodeWithOutData(1003);
            config(['default_ajax_return' => 'html',]);
            $assign_data= [
                'data_url'=>url('lookProjectDe',['guid'=>$guid]),
            ];
            $this->assign($assign_data);
            return $this->fetch('project_deposit_list');
        }
    }










    //收款计划
    public function collectionPlan($guid="",$type=""){
        if (empty($guid)) return self::showJsonReturnCode(1003);
        if ($this->request->isPost()){
            if ($type=="1"){
                $list=$this->showEasyUiJsonListNo('base/project/ProjectCollectPrice',false,['company_id'=>$this->member_info->company_id,'project_id'=>$guid,'collect_status'=>$type]);
            }else{
                $list=$this->showEasyUiJsonListNo('base/project/ProjectCollectPrice',false,['company_id'=>$this->member_info->company_id,'project_id'=>$guid,'collect_status'=>0]);
            }
            $model=new Project();
            $list=$model->getTime($list,'collect_date');
            return $list;
        }else{
            $obj=Loader::model("base/project/ProjectContract")->getInfoByGuId($guid);
            $list=Loader::model("base/project/ProjectDeposit")->getList(['project_id'=>$obj['project_id']]);
            $actual_price=0.00;
            if (!empty($list)) {
                foreach ($list as $value) {
                    $actual_price+= $value['collected_price'];
                }
            }
            $assign_data= [
                'data_url'=>url('collectionPlan',['guid'=>$obj['project_id']]),
                'url'=>url('collectionPlan',['guid'=>$obj['project_id'],'type'=>'1']),
                'title'=>'收款',
                'number'=>$obj['book_number'],
                'name'=>$obj['project_name'],
                'price'=>number_format($obj['contract_amount'],2),
                'plan_price'=>number_format($actual_price,2),//已付定金
                'actual_price'=>$obj['price'],//实际收入
                'surplus_price'=>number_format($obj['contract_amount']-$obj['price'],2),//剩余金额
                'guid'=>$guid, //合同表里面的id
                'pro_id'=>$obj['project_id'] // 项目的id
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/collection_plan');
        }
    }
    //新增收款计划              (项目的id)
    public function addCollect($guid=""){
        if (empty($guid)) return self::showJsonReturnCode(1003);
        if ($this->request->isPost()){
            $data=$this->request->post();
            $model=new ProjectCollectPrice();
            $validate_time='base/ProjectCollectPrice.add';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $data['collect_uuid']=$this->member_info->uuid;
            $data['collect_uuid_name']=$this->member_info->name;
            $data['company_id']=$this->member_info->company_id;
            $data['project_id']=$guid;

            $data["collect_date"]=strtotime($data["collect_date"]);

            $re=$model->saveData($data,$guid);
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="新增收款";
                $log["guid"]=$guid;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
                SendTemplateMessage::sendTemplateMessage('collectionAudit');
            }
            return $re;
        }else{
            $obj=Loader::model("base/project/ProjectContract")->getInfoByGuId($guid);
            $list=Loader::model("base/project/ProjectDeposit")->getList(['project_id'=>$obj['project_id']]);
            $actual_price=0.00;
            if (!empty($list)) {
                foreach ($list as $value) {
                    $actual_price+= $value['collected_price'];
                }
            }
            $assign_data= [
//                'title'=>'收款',
                'number'=>$obj['book_number'],
                'check'=>'false' ,
                'name'=>$obj['project_name'],
//                'price'=>number_format($obj['contract_amount'],2),
//                'plan_price'=>number_format($obj['contract_amount'],2),//计划收入
//                'actual_price'=>number_format($actual_price,2),//实际收入
                'surplus_price'=>$obj['contract_amount']-$actual_price,//剩余金额
//                'guid'=>$guid,
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/add_collect');
        }
    }
    public function refundPrice($guid=""){  //退款申请
        if (empty($guid)) return self::showReturnCode(1003);
        if ($this->request->isPost()){
            $data=$this->request->post();
            $validate_time='base/ProjectCollectPricePay.refund';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $model=new ProjectCollectPriceRefund();
            $data['collect_uuid']=$this->member_info->uuid;
            $data['collect_uuid_name']=$this->member_info->name;
            $data['company_id']=$this->member_info->company_id;
            $data['project_id']=$guid;
            $re=$model->addPaymentPro($data,$guid);
            return $re;

        }else{
            $obj=Loader::model("base/project/ProjectContract")->getInfoByGuId($guid);
            $list=Loader::model("base/project/ProjectDeposit")->getList(['project_id'=>$obj['project_id']]);
            $actual_price=0.00;
            if (!empty($list)) {
                foreach ($list as $value) {
                    $actual_price+= $value['collected_price'];
                }
            }
            $assign_data= [
                'number'=>$obj['book_number'],
                'check'=>'false',
                'name'=>$obj['project_name'],
                'surplus_price'=>$obj['contract_amount']-$actual_price,//剩余金额
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/refund_price');
        }
    }
    public function showRefundPrice($pro_id="",$type=""){
        if (empty($pro_id)) return self::showReturnCode(1003);
        if ($this->request->isPost()){
            if ($type==1){
                $list=$this->showEasyUiJsonListNo('base/project/ProjectCollectPriceRefund',false,['company_id'=>$this->member_info->company_id,'project_id'=>$pro_id,'collect_status'=>1]);
            }else if ($type==0){
                $list=$this->showEasyUiJsonListNo('base/project/ProjectCollectPriceRefund',false,['company_id'=>$this->member_info->company_id,'project_id'=>$pro_id,'collect_status'=>0]);
            }else if ($type=='finance'){
                $list=$this->showEasyUiJsonListNo('base/project/ProjectCollectPriceRefund',false,['company_id'=>$this->member_info->company_id,'project_id'=>$pro_id,'examine_status'=>1,'collect_status'=>0]);
            } else{
                $list=[];
            }

            return $list;
        }
    }
    public function showRefundPriceFinance($pro_id=""){  //财务查看的退款申请
        if (empty($pro_id) ) return self::showReturnCode(1003);
        if ($this->request->isPost()){
            $list=$this->showEasyUiJsonListNo('base/project/ProjectCollectPriceRefund',false,['company_id'=>$this->member_info->company_id,'project_id'=>$pro_id,'examine_status'=>1,'collect_status'=>0]);
            return $list;
        }
    }
    public function delContent(){ //删除收款申请
        if ($this->request->isPost()){
            $data=$this->request->post();
            if (empty($data)) return self::showReturnCode(1003);
            if (!isset($data['id'])) return self::showReturnCode(1003);
            $model=new ProjectCollectPrice();
            $pro_id=$model->where(['guid'=>$data['id']])->value('project_id');
            $re=$model->delDate($data['id']);
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="删除收款申请";
                $log["guid"]=$pro_id;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
            }
            return $re;
        }else{
            return self::showReturnCode(1003);
        }
    }
    public function formLoad($guid=""){  //修改加载表单
        if (!empty($guid)) {
            $model=new ProjectCollectPrice();
            return json($model->getInfoByGuid($guid));
        } else {
            return json([]);
        }
    }
    public function editCollect($guid=""){
        if (empty($guid)) return self::showReturnCode(1003);
        $model=new ProjectCollectPrice();
        if ($this->request->isPost()){
            $data=$this->request->post();
            $validate_time='base/ProjectCollectPrice.add';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $re=$model->editCollect($data,$guid);
            $pro_id=$model->where(['guid'=>$guid])->value('project_id');
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="修改收款申请";
                $log["guid"]=$pro_id;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
            }
            return $re;
        }else{
            $obj=$model->getInfoByGuId($guid);

            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            $assign_data= [
//
                'number'=>$obj['book_number'],
                'name'=>$project_name,
                'check'=>$obj['invoice_value']==1 ? 'true' : 'false' ,
//
                'surplus_price'=>'0',//剩余金额
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/addCollect');
        }
    }
    public function editExamine($guid=""){ //审核收款
        if (empty($guid)) return self::showReturnCode(1003);
        $model=new ProjectCollectPrice();
        if ($this->request->isPost()){
            $data=$this->request->post();
            $data['examine_uuid']=$this->uuid;
            $data['examine_uuid_name']=$this->member_info->name;
            $re=$model->editExamine($data,$guid);
            $pro_id=$model->where(['guid'=>$guid])->value('project_id');
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="收款审核";
                $log["guid"]=$pro_id;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
            }
            return $re;
        }else{
            $obj=$model->getInfoByGuId($guid);
            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            $assign_data= [
                'number'=>$obj['number'],
                'book_number'=>$obj['book_number'],
                'cashier_uuid_name'=>$obj['cashier_uuid'],
                'name'=>$project_name,
                'price'=>$obj['collect_price'],
                'price_no'=>$obj['price'],
                'collect_type'=>$obj['collect_type_name'],
                'collect_name'=>$obj['collect_name']
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/edit_examine');
        }
    }
    //收款确认
    public function addCollectPrice($guid=""){
        if (empty($guid)) return self::showReturnCode(1003);
        $model=new ProjectCollectPrice();
        if ($this->request->isPost()){
            $data=$this->request->post();
            $validate_time='base/ProjectCollectPrice.price';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $data['collected_uuid']=$this->uuid;
            $data['collected_uuid_name']=$this->member_info->name;
            $re=$model->addCollectPrice($data,$guid);
            $pro_id=$model->where(['guid'=>$guid])->value('project_id');
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="收款确认";
                $log["guid"]=$pro_id;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
            }
            return $re;
        }else{
            $obj=$model->getInfoByGuId($guid);
            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            $assign_data= [
                'number'=>$obj['number'],
                'book_number'=>$obj['book_number'],
                'name'=>$project_name,
                'price'=>$obj['collect_price'],
                'price_no'=>$obj['price'],
                'collect_type'=>$obj['collect_type_name'],
                'collect_name'=>$obj['collect_name']
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/add_collect_price');
        }
    }




    public function back(){ //收款的打回修改
        if ($this->request->isPost()){
            $data=$this->request->post();
            if (empty($data)) return self::showReturnCodeWithOutData(1003);
            if (!isset($data['id'])) return self::showReturnCodeWithOutData(1003);
            $model=new ProjectCollectPrice();
            $data['collected_uuid']=$this->uuid;
            $data['collected_uuid_name']=$this->member_info->name;
            $data['collect_desc']='打回修改';
            return $model->back($data,$data['id']);
        }else{
            return self::showReturnCode(1003);
        }
    }

    public function showDetailed($guid=""){  //详细
        if (empty($guid)) return self::showReturnCodeWithOutData(1003);
        $model=new ProjectCollectPrice();
        if ($this->request->isPost()){
            $data=$this->request->post();
            return $model->addCollectPrice($data,$guid);
        }else{
            $obj=$model->getInfoByGuId($guid);
            $obj=$model->getTime($obj,'collect_date',false);
            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            if (empty($obj['payment_id'])){
                $payment='';
            }else{
                $payment=Loader::model('base/finance/PaymentStyle')->where(['guid'=>$obj['payment_id']])->value('name');
            }
            $com_model=new PersonnelCompany();
            $company=$com_model->getInfoByGuId($this->member_info->company_id);
            $assign_data= [
                'name'=>$project_name,
                'obj'=>$obj,
                'company'=>$company?$company["company_name"]:'',
                'ex'=>$obj['collect_status']=="1"?'已收款':'未收款',
                'examine'=>$obj['examine_status']=="1"?'审核通过':'未审核或审核不通过',
                'invoice'=>$obj['invoice_value']==0?'无发票':'开发票',
                'payment'=>$payment
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/show_detailed');
        }
    }
    public function showRefundDetailed($guid=""){  //退款详细
        if (empty($guid)) return self::showReturnCodeWithOutData(1003);
            $obj=ProjectCollectPriceRefund::quickGet($guid);
            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            if (empty($obj['payment_id'])){
                $payment='';
            }else{
                $payment=Loader::model('base/finance/PaymentStyle')->where(['guid'=>$obj['payment_id']])->value('name');
            }
            $com_model=new PersonnelCompany();
            $company=$com_model->getInfoByGuId($this->member_info->company_id);
            $assign_data= [
                'company'=>$company?$company["company_name"]:'',
                'name'=>$project_name,
                'obj'=>$obj,
                'ex'=>$obj['collect_status']=="1"?'已退款':'未退款',
                'examine'=>$obj['examine_status']=="1"?'审核通过':'未审核或审核不通过',
                'invoice'=>$obj['invoice_value']==0?'无发票':'开发票',
                'payment'=>$payment
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/show_detailed');

    }
    public function according($guid=""){  //按计划收款
        if (empty($guid)) return self::showJsonReturnCode(1003);
        if ($this->request->isPost()){
            $data=$this->request->post();
            $model=new ProjectCollectPrice();
            $validate_time='base/ProjectCollectPrice.addTo';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $data['collect_uuid']=$this->member_info->uuid;
            $data['collect_uuid_name']=$this->member_info->name;
            $data['company_id']=$this->member_info->company_id;
            $data['project_id']=$guid;
            $re=$model->savePlanData($data);
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="新增计划收款";
                $log["guid"]=$guid;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
            }
            return $re;
        }else{   //$guid=合同id
            $obj=Loader::model("base/project/ProjectContract")->getInfoByGuId($guid);
            $list=Loader::model("base/project/ProjectDeposit")->getList(['project_id'=>$obj['project_id']]);
            $actual_price=0.00;
            if (!empty($list)) {
                foreach ($list as $value) {
                    $actual_price+= $value['collected_price'];
                }
            }
            $assign_data= [
                'number'=>$obj['book_number'],
                'name'=>$obj['project_name'],
                'price'=>$obj['contract_amount']-$obj['price'],//剩余金额
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/according');
        }
    }
    public function showCollectPlanCon($guid=""){  //显示计划的详细内容
        if (empty($guid)) return self::showReturnCode(1003);
        if ($this->request->isPost()){
            $list=$this->showEasyUiJsonListNo('base/finance/CollectPlanAccess',false,['collect_plan_id'=>$guid]);
            return $list;
        }else{
            $assign_data=[
                'data_url'=>url("showCollectPlanCon",['guid'=>$guid]),
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/bin_ding_collect_plan');
        }
    }

    public function payCollectPrice($guid=""){ //付款确认
        if (empty($guid)) return self::showReturnCode(1003);
        $model=new ProjectCollectPricePay();
        if ($this->request->isPost()){
            $data=$this->request->post();
            $validate_time='base/ProjectCollectPricePay.price';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $data['collected_uuid']=$this->uuid;
            $data['collected_uuid_name']=$this->member_info->name;
            $re=$model->payCollectPrice($data,$guid);
            if ($re['code']=="1001"){
                $pro_id=$model->where(['guid'=>$guid])->value('project_id');
                $model_log=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="付款确认";
                $log["guid"]=$pro_id;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model_log->addProjectLog($log);
            }
            return $re;
        }else{
            $obj=$model->getInfoByGuId($guid);
            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            $assign_data= [
                'number'=>$obj['number'],
                'book_number'=>$obj['book_number'],
                'name'=>$project_name,
                'price'=>$obj['collect_price'],
                'price_no'=>$obj['price'],
                'collect_type'=>$obj['collect_type_name'],
                'collect_name'=>$obj['collect_name']
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/pay_collect_price');
        }
    }

    //显示有退款的项目
    public function showRefundPriceProject(){
        if ($this->request->isPost()){
            $model=new ProjectCollectPriceRefund();
            $list=$model->where(['company_id'=>$this->member_info->company_id,'examine_status'=>0])->select();
            if (!empty($list)){
                foreach ($list as $value){
                    $pro=Project::quickGet($value['project_id']);
                    $value['project_name']=empty($pro)?"":$pro['project_name'];
                }
            }
            $arr=[];
            $arr['rows']=$list;
            $arr['total']=count($list);
            return $arr;
        }else{
            $arr=[
                'title'=>'退款项目',
                'data_url'=>url('showRefundPriceProject'),
            ];
            $this->assign($arr);
            self::echoHtml();
            return $this->fetch('project_collection/show_refund_price_project');
        }
    }
    public function editRefund($guid=""){  //审核
        if (empty($guid)) return self::showReturnCode(1003);
        if ($this->request->isPost()){
            $data=$this->request->post();
            $model=new ProjectCollectPriceRefund();
            $data['examine_uuid']=$this->uuid;
            $data['examine_uuid_name']=$this->member_info->name;
            $re=$model->editExamine($data,$guid);
            return $re;
        }else{
            return self::showReturnCode(1003);
        }
    }
    public function loadFormRefund($guid=""){
        if (!empty($guid)) {
            $model=new ProjectCollectPriceRefund();
            return json($model->getInfoByGuid($guid));
        } else {
            return json([]);
        }
    }
    public function refundPriceEdit($guid=""){
        if (empty($guid)) return self::showReturnCode(1003);
        $model=new ProjectCollectPriceRefund();
        if ($this->request->isPost()){
            $data=$this->request->post();
            $validate_time='base/ProjectCollectPricePay.add';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $re=$model->editCollect($data,$guid);
            $pro_id=$model->where(['guid'=>$guid])->value('project_id');
            if ($re['code']=="1001"){
                $model=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="修改退款申请";
                $log["guid"]=$pro_id;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model->addProjectLog($log);
            }
            return $re;
        }else{
            $obj=$model->getInfoByGuId($guid);
            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            $assign_data= [
//
                'number'=>$obj['book_number'],
                'name'=>$project_name,
                'check'=>$obj['invoice_value']==1 ? 'true' : 'false' ,
//
                'surplus_price'=>'0',//剩余金额
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/refund_price');
        }
    }
    public function priceRefund($guid=""){ //退款确认
        if (empty($guid)) return self::showReturnCode(1003);
        $model=new ProjectCollectPriceRefund();
        if ($this->request->isPost()){
            $data=$this->request->post();
            $validate_time='base/ProjectCollectPricePay.price';
            if ($validate_time!= false) {
                $result = $this->validate($data, $validate_time);
                if (true !== $result) return self::showJsonReturnCodeWithOutData(1003,$result);
            }
            $data['collected_uuid']=$this->uuid;
            $data['collected_uuid_name']=$this->member_info->name;
            $re=$model->payCollectPrice($data,$guid);
            if ($re['code']=="1001"){
                $pro_id=$model->where(['guid'=>$guid])->value('project_id');
                $model_log=new ProjectTraceLog();
                $log=[];
                $log["log_content"]="退款确认";
                $log["guid"]=$pro_id;
                $log["uuid"]=$this->member_info->uuid;
                $log["jobs_id"]=$this->member_info->jobs_id;
                $log["department_id"]=$this->member_info->department_id;
                $model_log->addProjectLog($log);
            }
            return $re;
        }else{
            $obj=$model->getInfoByGuId($guid);
            $project_name=Loader::model("base/Project")->where(['guid'=>$obj['project_id']])->value('project_name');
            $assign_data= [
                'number'=>$obj['number'],
                'book_number'=>$obj['book_number'],
                'name'=>$project_name,
                'price'=>$obj['collect_price'],
                'price_no'=>$obj['price'],
                'collect_type'=>$obj['collect_type_name'],
                'collect_name'=>$obj['collect_name']
            ];
            $this->assign($assign_data);
            self::echoHtml();
            return $this->fetch('project_collection/pay_collect_price');
        }
    }
}