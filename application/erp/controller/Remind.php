<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/5/23
 * Time: 13:02
 * 今日提醒
 */

namespace app\erp\controller;

use app\base\controller\PDF;
use app\base\controller\RedisHash;
use app\base\controller\Word;
use app\base\model\Base;
use app\base\model\budget\BudgetBookNumber;
use app\base\model\budget\DefaultProjectCopy;
use app\base\model\budget\DefaultRateCopy;
use app\base\model\budget\PrintRequest;
use app\base\model\BudgetDefaultBook;
use app\base\model\BudgetDefaultRate;
use app\base\model\BudgetDefaultProject;
use app\base\model\build\BuildContractRint;
use app\base\model\build\BuildProjectCategoryPhoto;
use app\base\model\build\BuildProjectPercentage;
use app\base\model\build\BuildProjectTime;
use app\base\model\build\BuildSupervision;
use app\base\model\build\BuildSupervisionTem;
use app\base\model\build\BuildSupervisionUser;
use app\base\model\design\DesignPhoto;
use app\base\model\DesignBudgetAccess;
use app\base\model\DesignBudgetListAccess;
use app\base\model\DesignPhase;
use app\base\model\engin\EnginProjectBuildTypeAudit;
use app\base\model\engin\EnginProjectMaterial;
use app\base\model\engin\EnginProjectMaterialAddress;
use app\base\model\engin\EnginProjectMaterialApply;
use app\base\model\engin\EnginProjectMaterialCopy;
use app\base\model\MaterialDataStyle;
use app\base\model\MaterialListEdit;
use app\base\model\PersonnelDepartment;
use app\base\model\PersonnelJobs;
use app\base\model\PersonnelUser;
use app\base\model\Project;
use app\base\model\project\ProjectCollectPrice;
use app\base\model\project\ProjectCollectPricePay;
use app\base\model\ProjectContacts;
use app\base\model\ProjectRelatedPerson;
use app\base\model\DesignBudget;
use app\base\model\ProjectRemindTime;
use app\base\model\ProjectStructure;
use app\base\model\ProjectBuilding;
use app\base\model\ProjectTraceLog;
use app\erp\config\FieldValue;
use app\erp\controller\template_message\SendTemplateMessage;
use think\Db;
use think\Loader;
use think\Session;
use app\erp\config\Config;


class Remind extends Auth
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        $this->config_list = Config::$Design;
    }

    /*项目跟踪提醒和收款提醒*/
    public function remindNumber(){
        if ($this->request->isPost()){
            $collect_cont=Db::table('mk_project_collect_price')
                ->where(['cashier_uuid'=>$this->uuid,'collect_status'=>0,'status'=>1])
                ->whereTime('collect_date', 'd')
                ->count();
            $project_cont=Db::table('mk_project_remind_time')
                ->where(['uuid'=>$this->uuid,'status'=>1])
                ->whereTime('remind_time', 'd')
                ->count();
            $all=$collect_cont+$project_cont;
            if($all>0){
                $data=[
                    'project'=>$project_cont, //項目跟踪提醒
                    'collect'=>$collect_cont, //项目收款提醒
                ];
                return self::showJsonReturnCode(1001,$data);
            }else{
                return self::showJsonReturnCode(1011,[],'暂无');
            }
        }
    }



    //<--- 项目跟踪提醒--->
    public function projectRemind(){
        if($this->request->isPost()){
            $cont=Db::table('mk_project_remind_time')
                ->where(['uuid'=>$this->uuid,'status'=>1])
                ->whereTime('remind_time', 'd')
                ->count();
            if($cont>0){
                return self::showJsonReturnCode(1001,$cont);
            }else{
                return self::showJsonReturnCode(1011,$cont,'暂无');
            }

        }
    }
    public function showProjectRemind($type=""){
        if ($this->request->isPost()){
            $model=new ProjectRemindTime();
            $list=[];
            $limit=$this->request->param('page');
            $rows=$this->request->param('rows');
            switch ($type){
                case 'new':
                    $list=$model->showProjectRemind($limit,$rows);
                    break;
                case "all":
                    $list=$model->showProjectRemindAll($limit,$rows);
                    break;
                default:
                    break;
            }
            return $list;
        }else{
            $arr=[
                'data_url'=>url("showProjectRemind",["type"=>'new']),
                'url'=>url("showProjectRemind",["type"=>'all']),
            ];
            $this->assign($arr);
            self::echoHtml();
            return $this->fetch('show_project_remind');
        }
    }
    public function editStatusProjectRemind(){
        if ($this->request->isPost()){
            $data=$this->request->post("id");
            if (empty($data)) return self::showJsonReturnCode(1003);
            $model=new ProjectRemindTime();
            return $model->editStatus($data);
        }else{
            return self::showJsonReturnCode(1003);
        }
    }
    //<------>

    public function showCollectRemind(){
        if ($this->request->isPost()){
            $model=new ProjectCollectPrice();
            $limit=$this->request->param('page');
            $rows=$this->request->param('rows');
            $list=$model->showCollectRemind($limit,$rows);
            return $list;
        }else{
            $arr=[
                'data_url'=>url("showCollectRemind"),
            ];
            $this->assign($arr);
            self::echoHtml();
            return $this->fetch('show_collect_remind');
        }
    }
}