<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/5/23
 * Time: 13:02
 */

namespace app\erp\controller;

use app\base\controller\PDF;
use app\base\controller\RedisHash;
use app\base\controller\Word;
use app\base\model\Base;
use app\base\model\budget\BudgetBookNumber;
use app\base\model\budget\DefaultProjectCopy;
use app\base\model\budget\DefaultRateCopy;
use app\base\model\budget\PrintRequest;
use app\base\model\BudgetDefaultBook;
use app\base\model\BudgetDefaultRate;
use app\base\model\BudgetDefaultProject;
use app\base\model\build\BuildContractRint;
use app\base\model\build\BuildProjectCategoryPhoto;
use app\base\model\build\BuildProjectPercentage;
use app\base\model\build\BuildProjectTime;
use app\base\model\build\BuildSupervision;
use app\base\model\build\BuildSupervisionTem;
use app\base\model\build\BuildSupervisionUser;
use app\base\model\design\DesignPhoto;
use app\base\model\DesignBudgetAccess;
use app\base\model\DesignBudgetListAccess;
use app\base\model\DesignPhase;
use app\base\model\engin\EnginProjectBuildTypeAudit;
use app\base\model\engin\EnginProjectMaterial;
use app\base\model\engin\EnginProjectMaterialAddress;
use app\base\model\engin\EnginProjectMaterialApply;
use app\base\model\engin\EnginProjectMaterialCopy;
use app\base\model\MaterialDataStyle;
use app\base\model\MaterialListEdit;
use app\base\model\PersonnelDepartment;
use app\base\model\PersonnelJobs;
use app\base\model\PersonnelUser;
use app\base\model\Project;
use app\base\model\project\ProjectCollectPricePay;
use app\base\model\ProjectContacts;
use app\base\model\ProjectRelatedPerson;
use app\base\model\DesignBudget;
use app\base\model\ProjectRemindTime;
use app\base\model\ProjectStructure;
use app\base\model\ProjectBuilding;
use app\base\model\ProjectTraceLog;
use app\erp\config\FieldValue;
use app\erp\controller\template_message\SendTemplateMessage;
use think\Db;
use think\Loader;
use think\Session;
use app\erp\config\Config;


class WorkTarget extends Auth
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        $this->config_list = Config::$Design;
    }




    public function showMarketingTarget(){
            $department_type=array_search("市场部",FieldValue::getFieldValue("department_type"))?:6;
            $dep_list=Loader::model('base/PersonnelDepartment')->getList(['company_id'=>$this->member_info->company_id,'department_type'=>$department_type],'guid,department_name');
            $arr=[
                'data_url'=>url('showMarketData'),
                'add_url'=>url("addWorkTarget"),
                'dep_list'=>$dep_list,
                'first_url'=>empty($dep_list)?'':$dep_list[0]['guid'],
                'first_title'=>empty($dep_list)?'':$dep_list[0]['department_name'],
            ];
            $this->assign($arr);
            self::echoHtml();
            return $this->fetch('show_marketing_target');
    }
    public function showMarketData($guid=""){
        if (empty($guid)){
            return self::showJsonReturnCode(1003);
        }
        if ($this->request->isPost()){
            $model=new PersonnelUser();
            $time='m';
            $user=$model->marketData($time);
            $map=[
                'status'=>1,
                'department_id'=>$guid,
                'company_id'=>$this->member_info->company_id
            ];
            $list=$this->showEasyUiJsonList('base/PersonnelUser',false,$map,false,[],false,'uuid,name,create_time');
            $where=[
                'company_id'=>$this->member_info->company_id,
                'dep_id'=>$guid,
                'year'=>date('Y',time()),
                'month'=>date('m',time())
            ];
            $work_number=Db::table('mk_work_target')
                ->where($where)
                ->find();
            if (!empty($list['rows'])){
                foreach ($list['rows'] as $key=>$value){
                    $cg=0;
                    foreach ($user as $item){
                        if ($value['uuid']==$item['uuid']){
                            if ($item['feedback_stage']>=2){
                                $cg++;
                            }
                        }
                    }
                    $list['rows'][$key]['success']=$cg;
                    $list['rows'][$key]['sum']=empty($work_number)?0:$work_number['work_number'];
                }
            }
            return $list;
        }else{
            $arr=[
                'data_url'=>url('showMarketData',['guid'=>$guid]),
                'guid'=>$guid,
                'add_url'=>url('addWorkTarget',['guid'=>$guid]),
            ];
            $this->assign($arr);
            self::echoHtml();
            return $this->fetch('work_target_list');
        }
    }
    public function addWorkTarget($guid=""){
        if (empty($guid)) return self::showReturnCode(1003);
        if ($this->request->isPost()){
            $data=$this->request->post();
            $validate_name='base/WorkTarget.add';
            $result = $this->validate($data, $validate_name);
            if (true !== $result) return ['code' => '1003', 'msg' => $result,];
            $data['company_id']=$this->member_info->company_id;
            $data['dep_id']=$guid;
            $data['uuid']=$this->member_info->uuid;
            $data['year']=date('Y',time());
            $data['month']=date('m',time());
            $model=new \app\base\model\work\WorkTarget();
            $re=$model->saveWorkTarget($data);
            return $re;
        }else{
            $arr=[

            ];
            $this->assign($arr);
            self::echoHtml();
            return $this->fetch('add_work_target');
        }
    }

    public function showServerTarget(){
        $department_type=array_search("客服部",FieldValue::getFieldValue("department_type"))?:8;
        $dep_list=Loader::model('base/PersonnelDepartment')->getList(['company_id'=>$this->member_info->company_id,'department_type'=>$department_type],'guid,department_name');
        $arr=[
            'data_url'=>url('showMarketData'),
            'add_url'=>url("addWorkTarget"),
            'dep_list'=>$dep_list,
            'first_url'=>empty($dep_list)?'':$dep_list[0]['guid'],
            'first_title'=>empty($dep_list)?'':$dep_list[0]['department_name'],
        ];
        $this->assign($arr);
        self::echoHtml();
        return $this->fetch('show_marketing_target');
    }
    public function showServerData($guid=""){
        if (empty($guid)){
            return self::showJsonReturnCode(1003);
        }
        if ($this->request->isPost()){
            $model=new PersonnelUser();
            $time='m';
            $user=$model->marketData($time);
            $map=[
                'status'=>1,
                'department_id'=>$guid,
                'company_id'=>$this->member_info->company_id
            ];
            $list=$this->showEasyUiJsonList('base/PersonnelUser',false,$map,false,[],false,'uuid,name,create_time');
            $where=[
                'company_id'=>$this->member_info->company_id,
                'dep_id'=>$guid,
                'year'=>date('Y',time()),
                'month'=>date('m',time())
            ];
            $work_number=Db::table('mk_work_target')
                ->where($where)
                ->find();
            if (!empty($list['rows'])){
                foreach ($list['rows'] as $key=>$value){
                    $cg=0;
                    foreach ($user as $item){
                        if ($value['uuid']==$item['uuid']){
                            if ($item['feedback_stage']>=2){
                                $cg++;
                            }
                        }
                    }
                    $list['rows'][$key]['success']=$cg;
                    $list['rows'][$key]['sum']=empty($work_number)?0:$work_number['work_number'];
                }
            }
            return $list;
        }else{
            $arr=[
                'data_url'=>url('showMarketData',['guid'=>$guid]),
                'guid'=>$guid,
                'add_url'=>url('addWorkTarget',['guid'=>$guid]),
            ];
            $this->assign($arr);
            self::echoHtml();
            return $this->fetch('work_target_list');
        }
    }

}