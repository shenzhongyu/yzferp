<?php
/**
 * Created by PhpStorm.
 * Power by Mikkle
 * QQ:776329498
 * Date: 2017/5/3
 * Time: 16:21
 */

namespace app\api\controller;


use app\base\controller\Curl;
use app\base\controller\Rsa;
use app\base\model\PersonnelUser;
use app\base\model\WeFans;
use com\wechat\TpWechat;
use mikkle\tp_wechat\Wechat;
use think\Cache;
use think\Config;
use think\Exception;
use think\Loader;
use think\Log;
use think\Session;
class System extends Base
{
    protected $member_info;
    protected $open_id;
    protected $appid;
    protected $weObj;
    protected $fans_data;


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        config(['default_return_type'    => 'json',]);
    }

    /**
     * 根据绑定码绑定微信
     * Power: Mikkle
     * Email：776329498@qq.com
     * @param string $binding_code
     * @param string $open_id
     * @param string $md5
     * @return array
     */
    public function bindingWechat($binding_code="",$open_id="",$md5=""){
        try{
            if($md5!=md5("{$this->request->host()}{$binding_code}{$open_id}")){
                throw new Exception("参数错误$binding_code");
            }
            $record = Loader::model("base/PersonnelUser")->bindingOpenIdByBindingCode($open_id,$binding_code);

            if($record===true){
                return self::showJsonReturnCode(1001,["url"=>"http://{$this->request->host()}/wechat"]);
            }
            return self::showJsonReturnCodeWithOutData(1003,$record);
        }catch (Exception $e){
            Log::error($e->getMessage());
            return self::showJsonReturnCodeWithOutData(1008,$e->getMessage());
        }
    }

    public function logout(){
        $this->logoutGlobal();
        return $this->showReturnCodeWithOutData(1001);
    }



    public function getQrCode()
    {
        try{

        // Cache::clear();
        if (!Cache::get('log_seed','login')) Cache::set('log_seed',1000,3600);
        if ( Session::has('log_id', 'login') && ( Cache::has('log_'.Session::get('log_id', 'login')) && ! input('?new'))) {
            //赋值
            $code = [
                'code' => 1001,
                'sid' => Session::get('log_id', 'login') ,
                'img' => Session::get('qr_url', 'login') ,
                //  'cache'=>Cache::get('log_'.Session::get('log_id', 'login')),
            ];
            return json($code);
        } else {
            $log_id = Cache::inc('log_seed') . rand(100000, 999999);
            // return $log_id;

            $url =Config::get("wechat.wechat_get_qr_code_url");
            $data=[
                "code"=>Rsa::instance()->encrypt($log_id),
            ];
            $qr_url_data = json_decode(Curl::curlPost($url,$data));
            if(!is_object($qr_url_data)){
                throw new Exception("获取失败,请稍后再试");
            }
            if($qr_url_data->code!=1001){
                throw new Exception("获取失败");
            }
            $qr_url= $qr_url_data->data;
            if ($qr_url) {

                //写入session
                Session::set('log_id', $log_id, 'login');
                Session::set('qr_url', $qr_url, 'login');

                //写入Cache
                $log_data = ['code' => 0, 'type' => 'login', 'data' => []];
                Cache::set('log_' . $log_id, $log_data, 210);

                //赋值
                $code = [
                    'code' => 1001,
                    'sid' => $log_id,
                    'img' => $qr_url,
                ];
                return json($code);
            }
        }
        }catch (Exception $e){
            Log::error($e->getMessage());
            return self::showJsonReturnCodeWithOutData(1008,$e->getMessage());
        }
    }


    /**
     * 扫码登录 JavaScript轮询查询接口
     * Power by Mikkle
     * QQ:776329498
     * @return array
     */
    public function loginWe(){
        $sid  = $this->request->param('sid');
    //    if (!$data->isAjax()) return $this->showReturnCodeWithOutData(1002);
        if (empty($sid)) return $this->showReturnCodeWithOutData(1003);
        $code = [
            'code' => -1 ,
            'sid'    => $sid,
        ];

        if (!Cache::has('log_'.$sid) )   return $this->showReturnCodeWithOutData(1031,'数据超时失效');

        $cache_data=Cache::get('log_'.$sid);
        if($cache_data['code']==1001){

            if ($this->setOpenidLogin($sid)){
                $code['code']=1001;
                //$code['data']=$this->fans_data;
            }
        }else{
            $code['code']=1033;
            $code['msg']='等候扫描二维码';
        }
        return $code;
    }

    public function loginWechat($open_id="",$event_key){
        try{
            if($open_id){
                $open_id = str_replace(" ","+",$open_id);
                $open_id = Rsa::instance()->decrypt($open_id);

                if(!$open_id){
                    throw new Exception("用户不存在");
                }
                //写入登录缓存
                $log_data = [
                    'code' => 1001,
                    'content' => '登录成功',
                    'data' => $open_id,
                ];
                Cache::set('log_' . $event_key, $log_data, 120);
                Log::error("[$event_key]扫码登录授权成功!");
                return self::showJsonReturnCodeWithOutData(1001);
            }
        }catch(Exception $e){
            Log::error($e->getMessage());
            return self::showJsonReturnCodeWithOutData(1008,$e->getMessage());
        }
    }




    protected function setOpenidLogin($sid)
    {
        $cache_data =Cache::get('log_'.$sid);
        $member=new PersonnelUser();
        $member_info=$member->infoByOpenId($cache_data['data']);

        //扫码登录
        if ($member_info){
            $this->setLoginGlobal($member_info,2);
            Session::delete('log_id', 'login');
            Session::delete('qr_url', 'login');
            Cache::rm('log_'.$sid);
            return true ;
        }else{
            return false ;
        }

    }


    /**
     * 发送手机短信验证码
     * #User: Mikkle
     * #Email:776329498@qq.com
     * #Date:
     * @param bool|false $mobile
     * @return 出错返回1003错误码和错误详情|返回错误码
     */
    public function sendRegSms($mobile=false){
        if (!$this->request->isAjax() ) return $this->showReturnCodeWithOutData(1002);
        //判断登录
        if (!$this->checkAuth())return $this->showReturnCodeWithOutData(1004);

        if(!$mobile) $mobile=$this->request->param('mobile');
        if (!$mobile) return $this->showReturnCodeWithOutData(1003);
        //验证手机号码是否存在并且是唯一

        if (!$this->checkMobileExist($mobile)) return $this->showReturnCodeWithOutData(1004,'此手机不存在,请更换号码或联系管理员');
        $data_mobile['mobile']=$mobile;
        $result_mobile=$this->checkValidate($data_mobile,'base/System.mobile',true);
        if ( isset($result_mobile['code']) ) return  $result_mobile;
        if(!$this->checkRegSms($mobile)) return $this->showReturnCodeWithOutData(1003,'请勿一分钟内重复申请验证码');

        $req=$this->sendSmsCode($mobile);
        if ($req===true){
            return $this->showReturnCodeWithOutData(1001);
        }else{
            return $this->showReturnCodeWithOutData(1003,$req);
        }
    }

    /**
     * 检测手机验证码
     * Power by Mikkle
     * QQ:776329498
     * @param bool|false $mobile
     * @param bool|false $code
     * @return array //出错返回1003错误码和错误详情
     */
    public function checkRegSmsAction($mobile=false,$code=false){
        if (!$this->request->isAjax() ) return $this->showReturnCodeWithOutData(1002);
        //判断登录
        if (!$this->checkAuth())return $this->showReturnCodeWithOutData(1004);
        //验证手机号码是否存在并且是唯一
        if (!$mobile) $mobile=$this->request->param('mobile');
        if (!$code) $mobile=$this->request->param('code');
        $username=$this->request->param('username');
        $data_mobile=['mobile'=>$mobile,'code'=>$code,'username'=>$username];
        $result_mobile=$this->checkValidate($data_mobile,'base/System.checkCode');
        if ( isset($result_mobile['code']) ) return  $result_mobile;
        if (!$this->checkMobileExist($mobile)) return $this->showReturnCodeWithOutData(1004,'此手机不存在,请更换号码或联系管理员');

        if ($this->checkRegSms($mobile,$code)){
            //绑定手机号码
            $return =$this->bindingOpenIdByMobile($mobile,$username);

            if ($return==true){
                if (Cache::has('log_'.$this->request->param('sid'))){
                    $log_data=[
                        'code'=>1001,
                        'content'=>'登录成功',
                        'data'=>$this->open_id,
                    ];
                    Cache::set('log_'.$this->request->param('sid'),$log_data,120);

                }
                return $this->showReturnCodeWithOutData(1001,'绑定成功');
            }else{

                return $this->showReturnCodeWithOutData(1030,$return);
            }
        }else{
            return $this->showReturnCodeWithOutData(1010,'请求的验证码错误!');
        }
    }



    /**
     * 判断登录是否成功
     * #User: Mikkle
     * #Email:776329498@qq.com
     * #Date:
     * @return bool
     */
    private function checkAuth()
    {
        if (!Session::has('member_info','html5')&&!Session::has('open_id','html5')){
            return false;
        }else{
            $this->member_info = Session::get('member_info','html5');
            $this->open_id = Session::get('open_id','html5');
            $this->appid = Session::get('appid','html5');
            return true;
        }
    }

    private function checkMobileExist($mobile=''){

        $model = new PersonnelUser();
        $return = $model->checkMobileExist($mobile);
        return $return;
    }



    protected function sendSmsCode($mobile = false)
    {
        if (!$mobile) return false;
        $code = rand(10000, 99999);
        $templateId ='44663';//云紫峰ERP验证码模版

        $req = Loader::controller('base/Ucpaas')->sendSms($mobile,$templateId,$code);

        if ($req === true) {
            $data_cache = [
                'mobile' => $mobile,
                'code' => (string)$code,
                'times' => time() + 60,
            ];
            $this->setRegSmsCache($data_cache);
            return true;
        } else {
            return $req;
        }

    }

    /**
     * 检测手机短信验证码
     * #User: Mikkle
     * #Email:776329498@qq.com
     * #Date:
     * @param $mobile
     * @param bool|false $code
     * @return bool
     */
    protected function checkRegSms($mobile, $code = false)
    {
        if (!$mobile) return false;
        if ($code === false) {   //判断60秒以内是否重复发送
            if (!Cache::has('sms_' . $mobile)) return true;
            if (Cache::get('sms_' . $mobile)['times'] > time()) {
                return false;
            } else {
                return true;
            }
        } else {  //判断验证码是否输入正确
            if (!Cache::has('sms_' . $mobile)) return false;
            if (Cache::get('sms_' . $mobile)['code'] == $code) {
                return true;
            } else {
                return false;
            }
        }
    }

    /**
     * 设置手机短息验证码缓存
     * #User: Mikkle
     * #Email:776329498@qq.com
     * #Date:
     * @param $data_cache
     */
    protected function setRegSmsCache($data_cache)
    {
        Cache::set('sms_' . $data_cache['mobile'], $data_cache, 300);
    }


    /**
     * 绑定OpenidBy手机号码
     * #User: Mikkle
     * #Email:776329498@qq.com
     * #Date:
     * @param bool|false $mobile
     * @return bool
     * @throws \think\Exception
     */
    protected function bindingOpenIdByMobile($mobile = false,$username=false)
    {
        if (!$mobile) return false;
        if (!$username) return false;
        if (!$this->open_id) return false;
        $model = new PersonnelUser();
        return $model->bindingOpenIdByMobile($this->open_id,$mobile,$username);
    }

}